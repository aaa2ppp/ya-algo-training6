#include <stdio.h>
#include <cassert>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <map>
#include <set>
#include <queue>
#include <list>
#include <sstream>
#include <cstring>
using namespace std ;

#define ft first
#define sd second
#define pb push_back
#define all(x) x.begin(),x.end()

#define ll long long int
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define plii pair<pair<ll, int>, int>
#define piii pair<pii, int>
#define viii vector<pair<pii, int> >
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>
#define pli pair<ll,int>
#define mp make_pair
#define ms(x, v) memset(x, v, sizeof x)

#define sc1(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)

#define scll1(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)

#define pr1(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll1(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define pr_vec(v) for(int i=0;i<v.size();i++) cout << v[i] << " " ;

#define f_in(st) freopen(st,"r",stdin)
#define f_out(st) freopen(st,"w",stdout)

#define fr(i, a, b) for(i=a; i<=b; i++)
#define fb(i, a, b) for(i=a; i>=b; i--)
#define ASST(x, l, r) assert( x <= r && x >= l )

const int mod = 1e9 + 7;

int ADD(int a, int b, int m = mod) {
    int s = a;
    s += b;
    if( s >= m )
      s -= m;
    return s;
}

int MUL(int a, int b, int m = mod) {
    return (1LL * a * b % m);
}

int power(int a, int b, int m = mod) {
    int res = 1;
    while( b ) {
        if( b & 1 ) {
            res = 1LL * res * a % m;
        }
        a = 1LL * a * a % m;
        b /= 2;
    }
    return res;
}

ll nC2(ll x) {
    return ( x * ( x - 1 ) / 2 );
}

const int maxn = 5 * 1000 + 10;

vi adj[maxn];
map<pii, bool> dir;
int dp[maxn][maxn], sz[maxn], NcR[maxn][maxn];

int nCr(int n, int r) {
    if(r > n) return 0;
    if(n == 0 || r == 0) return 1; 
    int &ret = NcR[n][r];
    if(ret != -1) return ret;
    ret = 0;
    ret = nCr(n-1, r-1) + nCr(n-1, r);
    if( ret >= mod ) ret -= mod;
    return ret;
}

void dfs(int u, int p = -1) {
    sz[u] = 1;
    int total_left = 0, total_right = 0;
    for( auto it: adj[u] ) {
        if(it != p) {
            dfs(it, u);
            sz[u] += sz[it];
            if(dir[mp(u, it)]) {
                total_left += sz[it];
                int i; fr(i, 1, sz[it]) {
                    dp[it][i] += dp[it][i-1];
                    if(dp[it][i] >= mod) dp[it][i] -= mod;
                }
            } else {
                total_right += sz[it];
                int i; fb(i, sz[it]-1, 1) {
                    dp[it][i] += dp[it][i+1];
                    if(dp[it][i] >= mod) dp[it][i] -= mod;
                }
            }
        }
    }
    if(sz[u] == 1) { dp[u][1] = 1;}
    else {
        int left[2][total_left+1], right[2][total_right+1];
        ms(left, 0); ms(right, 0);
        int left_p = 0, left_n = 1, right_p = 0, right_n = 1;
        left[left_p][0] = right[right_p][0] = 1;
        int left_count = total_left;
        int right_count = total_right;
        total_left = total_right = 0;
        for( auto it: adj[u] ) {
            if(it != p) {
                if(dir[mp(u, it)]) {
                    total_left += sz[it];
                    int i, j; 
                    fr(i, 0, left_count) {
                        if(left[left_p][i]) {
                            fr(j, 1, sz[it]) {
                                int v = 1;
                                v = 1LL * nCr(i+j, j) * dp[it][j] % mod;
                                v = 1LL * v * left[left_p][i] % mod;
                                v = 1LL * v * nCr(total_left - (i+j), sz[it] - j) % mod; 
                                left[left_n][i+j] += v;
                                if(left[left_n][i+j] >= mod) left[left_n][i+j] -= mod;
                            }
                            left[left_p][i] = 0;
                        }
                    }
                    swap(left_p, left_n);
                } else {
                    total_right += sz[it];
                    int i, j; fr(i, 0, right_count) {
                        if(right[right_p][i]) {
                            fr(j, 1, sz[it]) {
                                int v = 1;
                                v = 1LL * nCr(i+j, j) * dp[it][sz[it] - j + 1] % mod;
                                v = 1LL * v * right[right_p][i] % mod;
                                v = 1LL * v * nCr(total_right - i - j, sz[it] - j) % mod; 
                                right[right_n][i+j] += v;
                                if(right[right_n][i+j] >= mod) right[right_n][i+j] -= mod;
                            }
                            right[right_p][i] = 0;
                        }
                    }
                    swap(right_p, right_n);
                }
            }
        }
        total_left = left_count;
        total_right = right_count;
        int i, j;
        fr(i, 1, sz[u]) {
            dp[u][i] = 0;
            fr(j, 0, min(i-1, total_left)) {
                int x = total_left - j;
                int v = left[left_p][j] % mod;
                v = 1LL * v * nCr(i-1, j) % mod;
                v = 1LL * v * nCr(sz[u] - i, x) % mod;
                if(sz[u] - i - x >= 0 && sz[u] - i - x <= total_right)
                    v = 1LL * v * right[right_p][sz[u] - i - x] % mod;
                else 
                    v = 0;
                dp[u][i] += v;
                if(dp[u][i] >= mod) dp[u][i] -= mod;
            }
        }
    }
}

void solve() {
    int n;
    cin >> n;
    int i, j;

    fr(i, 1, n-1) {
        int x, y;
        cin >> x >> y;
        dir[mp(x, y)] = 1;
        dir[mp(y, x)] = 0;
        adj[x].pb( y );
        adj[y].pb( x );
    }

    int ans = 0, mult = 1;

    dfs(1);

    fr(i, 1, n) { 
        ans += dp[1][i]; ans %= mod; 
    } 

    cout << ans << "\n";
}

int main() {
    ms(NcR, -1);
    solve();
    return 0;
}
